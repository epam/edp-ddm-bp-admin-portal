global:
  kafkaOperator:
    replicationFactor: 3
  bpAdminPortal:
    camunda:
      bpm:
        metrics:
          enabled: true
          scrapeInterval: 60s
  container:
    requestsLimitsEnabled: true
  registry:
    bpAdminPortal:
      container:
        envVars: {}
        resources:
          requests: {}
          limits: {}

image:
  name: business-process-administration-portal
  version: latest
port: 8080
service:
  type: ClusterIP
  port: 8080
replicas: 1
appConfigMountPath: "/app/config"
appSecretsMountPathBpmsDB: "/app/secrets/bpms-db"
appSecretsMountPathCamundaAdmin: "/app/secrets/camunda-admin"
appSecretsMountPathAdminKeycloakClient: "/app/secrets/admin-camunda-cockpit"
appSecretsMountPathOfficerKeycloakClient: "/app/secrets/officer-camunda-cockpit"
systemUserKeycloakClientSecretsMountPath: "/app/secrets/system-user-client"
redisSecretsMountPath: "/app/secrets/redis"
prometheusScrapePath: "/actuator/prometheus"
readinessPath: "/actuator/health/readiness"
livenessPath: "/actuator/health/liveness"

ingress: # expose the service with a route or an ingress depending on platform type
  platform: openshift # openshift or kubernetes

monitoring:
  namespace: openshift-monitoring

keycloak:
  client: camunda-cockpit
  adminRealm:
    name: admin
  officerRealm:
    name: officer-portal
  systemUserClient:
    clientName: camunda-cockpit
    realm: admin
    secretName: keycloak-client-camunda-cockpit-admin-secret

deployProfile: prod

kafka:
  service: kafka-cluster-kafka-bootstrap:9093
  user: bpms-user
  clusterName: kafka-cluster
  sslEnabled: true
  sslCertType: PEM
  sslUserKey: ${KAFKA_USER_KEYSTORE_KEY}
  sslUserCertificate: ${KAFKA_USER_KEYSTORE_CERTIFICATE}
  sslClusterCertificate: ${KAFKA_CLUSTER_TRUSTSTORE}
  numPartitions: 15

camunda:
  bpm:
    historyLevel: AUDIT
    databaseHistoryLevel: ACTIVITY

db:
  secret:
    name: operational-pguser-postgres

storage:
  form-data:
    type: redis
  message-payload:
    type: redis
  backend:
    redis:
      password: ${REDIS_PASSWORD}
      sentinel:
        master: mymaster
        nodes: ${redis.endpoint}

redis:
  secretName: redis-auth

edpComponent:
  description: "Користувацький інтерфейс для перегляду стану виконання та управління бізнес-процесами реєстру."
  displayName: "Веб-інтерфейс управління виконанням бізнес-процесів (Business Process Administration)"
  operationalZone: "registry-administration-zone"
